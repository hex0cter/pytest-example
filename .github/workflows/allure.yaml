name: pytest

on:
  push:
  workflow_dispatch:
    inputs:
      TEST_ENDPOINT: #this is used as ENV variable to provide host to run tests for
        description: "Endpoint for tests"
        required: true
        default: https://dev.scrive.com
      TEST_BROWSER: #this is used as ENV variable to browser to run tests with
        description: "Browser for tests"
        required: true
        default: chrome
      ALLURE_JOB_RUN_ID: # this will be used to generate Launch name on Allure TestOps side
        description: "Inner parameter for Allure TestOps"
        required: false

env:
  ALLURE_ENDPOINT: ${{ secrets.ALLURE_ENDPOINT }}
  ALLURE_TOKEN: ${{ secrets.ALLURE_TOKEN }}
  ALLURE_PROJECT_ID: ${{ secrets.ALLURE_PROJECT_ID }}
  ALLURE_TESTPLAN_PATH: "./testplan.json" # needed to filter the tests
  ALLURE_RESULTS: "allure-results" # folder with the test results
  TEST_REPORT_DIR: "/tmp/allure_results"
  ALLURE_JOB_RUN_ID: ${{ github.event.inputs.ALLURE_JOB_RUN_ID }}

jobs:
  all-tests:
    name: all the tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/github-script@v4
        id: allure-job-uid
        with:
          result-encoding: string
          script: |
            const result = await github.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            return `${context.repo.owner}/${context.repo.repo}/actions/workflows/${result.data.workflow_id}`
      - name: Download allurectl
        run: |
          wget https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_386 -O ./allurectl
          chmod +x ./allurectl
      - name: Install pyenv
        run: |
          curl https://pyenv.run | bash
      - name: Install dependencies
        run: |
          pip install pipenv && pipenv install
#      - name: Prepare TestPlan
#        run: ./allurectl job-run plan --output-file ${ALLURE_TESTPLAN_PATH}
      - name: Run the tests
        run: |
          set +e
          mkdir -p ${TEST_REPORT_DIR}
          pipenv run pytest --alluredir=${TEST_REPORT_DIR} # allows sending the test results in the real time
          ./allurectl upload --endpoint ${ALLURE_ENDPOINT} --token ${ALLURE_TOKEN} --project-id ${ALLURE_PROJECT_ID} --launch-name "github launch ${ALLURE_JOB_UID}" ${TEST_REPORT_DIR}
        env:
          ALLURE_JOB_UID: ${{steps.allure-job-uid.outputs.result}}
          TEST_ENDPOINT: ${{ github.event.inputs.TEST_ENDPOINT }}
          TEST_BROWSER: ${{ github.event.inputs.TEST_BROWSER }}